{"ast":null,"code":"var _jsxFileName = \"/Users/meridithberk/Desktop/Bootcamp/Repositories/card-game-/src/App.js\";\nimport React from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport friendsfile from \"./friendsfile.json\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      friends: friendsfile,\n      score: 0,\n      topScore: 0,\n      clicked: []\n    };\n\n    this.onclickcard = id => {\n      console.log(\"clicked: \", id);\n\n      if (this.state.clicked.includes(id)) {// restart game\n      } else {\n        let tempClicked = this.state.clicked;\n        tempClicked.push(id); // shuffle\n\n        let tempFriends = this.state.friends.sort(() => Math.random() - 0.5);\n        let newscore = this.state.score + 1;\n        this.setState({\n          score: newscore,\n          clicked: tempClicked,\n          friends: tempFriends\n        });\n      } // be sure thay the card was not clicked before in the current game\n      // if not then score++ and shuffle\n      // if yes we need to restart the game === start score 0 and new friends refreshed (no one is clicked)\n      //this.setState({ friends: this.state.friends.filter(x => x.id !== id )});\n\n    };\n  }\n\n  render() {\n    const friends = this.state.friends;\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Friends List\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Score: \", this.state.score, \" - Topscore: \", this.state.topScore)), friends.map(friend => React.createElement(FriendCard, {\n      onclickcard: this.onclickcard,\n      id: friend.id,\n      name: friend.name,\n      image: friend.image,\n      key: friend.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/meridithberk/Desktop/Bootcamp/Repositories/card-game-/src/App.js"],"names":["React","FriendCard","Wrapper","friendsfile","App","Component","state","friends","score","topScore","clicked","onclickcard","id","console","log","includes","tempClicked","push","tempFriends","sort","Math","random","newscore","setState","render","map","friend","name","image"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAO,WAAP;;AAGA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAClCC,KADkC,GAC1B;AACNC,MAAAA,OAAO,EAAEJ,WADH;AAENK,MAAAA,KAAK,EAAE,CAFD;AAGNC,MAAAA,QAAQ,EAAE,CAHJ;AAINC,MAAAA,OAAO,EAAE;AAJH,KAD0B;;AAAA,SAQlCC,WARkC,GAQrBC,EAAE,IAAI;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,EAAzB;;AAEA,UAAI,KAAKN,KAAL,CAAWI,OAAX,CAAmBK,QAAnB,CAA4BH,EAA5B,CAAJ,EAAoC,CAEnC;AAGA,OALD,MAMI;AACF,YAAII,WAAW,GAAG,KAAKV,KAAL,CAAWI,OAA7B;AACAM,QAAAA,WAAW,CAACC,IAAZ,CAAiBL,EAAjB,EAFE,CAGF;;AAEA,YAAIM,WAAW,GAAG,KAAKZ,KAAL,CAAWC,OAAX,CAAmBY,IAAnB,CAAwB,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAA9C,CAAlB;AACA,YAAIC,QAAQ,GAAG,KAAKhB,KAAL,CAAWE,KAAX,GAAmB,CAAlC;AACA,aAAKe,QAAL,CAAc;AACZf,UAAAA,KAAK,EAAEc,QADK;AAEZZ,UAAAA,OAAO,EAAEM,WAFG;AAGZT,UAAAA,OAAO,EAAEW;AAHG,SAAd;AAKD,OArBgB,CAsBjB;AACA;AACA;AAGA;;AACD,KApCiC;AAAA;;AAsClCM,EAAAA,MAAM,GAAI;AAAA,UACAjB,OADA,GACY,KAAKD,KADjB,CACAC,OADA;AAER,WACA,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAY,KAAKD,KAAL,CAAWE,KAAvB,mBAA2C,KAAKF,KAAL,CAAWG,QAAtD,CADF,CAHF,EAOGF,OAAO,CAACkB,GAAR,CAAYC,MAAM,IAEnB,oBAAC,UAAD;AACE,MAAA,WAAW,EAAE,KAAKf,WADpB;AAEE,MAAA,EAAE,EAAEe,MAAM,CAACd,EAFb;AAGE,MAAA,IAAI,EAAEc,MAAM,CAACC,IAHf;AAIE,MAAA,KAAK,EAAED,MAAM,CAACE,KAJhB;AAKE,MAAA,GAAG,EAAEF,MAAM,CAACd,EALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFC,CAPH,CADA;AAoBE;;AA5D8B;;AA+DlC,eAAeR,GAAf","sourcesContent":["import React from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport friendsfile from \"./friendsfile.json\";\nimport \"./App.css\";\n\n\nclass App extends React.Component {\nstate = {\n  friends: friendsfile,\n  score: 0,\n  topScore: 0,\n  clicked: []\n}\n\nonclickcard= id => {\n  console.log(\"clicked: \", id)\n\n  if (this.state.clicked.includes(id)){\n\n   // restart game\n\n\n  }\n  else{\n    let tempClicked = this.state.clicked\n    tempClicked.push(id)\n    // shuffle\n\n    let tempFriends = this.state.friends.sort(() => Math.random() - 0.5);\n    let newscore = this.state.score + 1\n    this.setState({\n      score: newscore,\n      clicked: tempClicked,\n      friends: tempFriends\n    })\n  }\n  // be sure thay the card was not clicked before in the current game\n  // if not then score++ and shuffle\n  // if yes we need to restart the game === start score 0 and new friends refreshed (no one is clicked)\n\n\n  //this.setState({ friends: this.state.friends.filter(x => x.id !== id )});\n}\n\nrender () {\n  const { friends } = this.state\n  return (\n  <Wrapper>\n    <h1 className=\"title\">Friends List</h1>\n\n    <div>\n      <h1>Score: {this.state.score} - Topscore: {this.state.topScore}</h1>\n    </div>\n\n    {friends.map(friend => (\n\n    <FriendCard\n      onclickcard={this.onclickcard}\n      id={friend.id}\n      name={friend.name}\n      image={friend.image}\n      key={friend.id}\n     \n    />\n    ))}\n  </Wrapper>\n  )};\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}